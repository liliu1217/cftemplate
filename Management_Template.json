{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "CloudFormation template to create development Network resources, company name: LLD, app name : LLAPP",

  "Parameters" : {

    "CreateFullSizeVolumes" : {
      "Description" : "Create full size volumes for each instance, this should be NO while testing templates or for temporary environments",
      "Default" : "NO",
      "Type" : "String",
      "AllowedValues" : ["YES", "NO"],
      "ConstraintDescription" : "must specify YES or NO."
    },

    "LocalDomain": {
      "Description": "local domain name to be used within AWS",
      "Type": "String",
      "Default" : "LLAPP.LLD.aws"
    },

    "BaseAMI": {
      "Description": "Base AMI ID",
      "Type": "String",
      "Default" : "ami-df9dfec9"
    },

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair.",
      "Default": "hz_key"
    },

    "BastionInstanceType" : {
      "Description" : "Bastion instance type",
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large"],
      "ConstraintDescription" : "must be a valid and allowed EC2 instance type."
    },

    "NATInstanceType" : {
      "Description" : "NAT instance type",
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large"],
      "ConstraintDescription" : "must be a valid and allowed EC2 instance type."
    },

    "SchedulerInstanceType" : {
      "Description" : "Scheduler instance type",
      "Type" : "String",
      "Default" : "t2.large",
      "AllowedValues" : [  "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid and allowed EC2 instance type."
    },

    "BuildInstanceType" : {
      "Description" : "Build server instance type",
      "Type" : "String",
      "Default" : "t2.xlarge",
      "AllowedValues" : [  "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large","t2.xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid and allowed EC2 instance type."
    },

    "LDAPInstanceType" : {
      "Description" : "Build server instance type",
      "Type" : "String",
      "Default" : "t2.xlarge",
      "AllowedValues" : [  "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large","t2.xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid and allowed EC2 instance type."
    }

  },

  "Conditions" : {
    "FullSizeVolumes" : {"Fn::Equals" : [{"Ref" : "CreateFullSizeVolumes"}, "YES"]}
  },

  "Mappings" : {

    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.nano"     : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  },
      "t2.xlarge"   : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.large"    : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.4xlarge"  : { "Arch" : "HVM64"  },
      "m4.10xlarge" : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "g2.8xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "PV64" : "ami-50842d38", "HVM64" : "ami-2a73fe3c", "HVMG2" : "ami-3a329952"  },
      "us-west-2"      : { "PV64" : "ami-af86c69f", "HVM64" : "ami-2a73fe3c", "HVMG2" : "ami-47296a77"  },
      "us-west-1"      : { "PV64" : "ami-c7a8a182", "HVM64" : "ami-2a73fe3c", "HVMG2" : "ami-331b1376"  }
    },

    "AWSNATAMI" : {
      "us-east-1"      : { "AMI" : "ami-c6699baf" },
      "us-west-2"      : { "AMI" : "ami-52ff7262" },
      "us-west-1"      : { "AMI" : "ami-3bcc9e7e" }
    },

    "CIDRBlocks" : {
      "LLDAWS"     		    : { "CIDR" : "172.27.0.0/16" },
      "LLDProdEnv"			: { "CIDR" : "172.27.0.0/20" },
	  "LLDProdWLSubnetZA"	: { "CIDR" : "172.27.0.0/24" },
	  "LLDProdCoreSubnetZA"	: { "CIDR" : "172.27.1.0/24" },
	  "LLDProdDBSubnetZA"	: { "CIDR" : "172.27.2.0/24" },
	  "LLDProdDMZSubnetZA"	: { "CIDR" : "172.27.3.0/24" },
	  "LLDProdWLSubnetZB"	: { "CIDR" : "172.27.4.0/24" },
	  "LLDProdCoreSubnetZB"	: { "CIDR" : "172.27.5.0/24" },
	  "LLDProdDBSubnetZB"	: { "CIDR" : "172.27.6.0/24" },
	  "LLDProdDMZSubnetZB"	: { "CIDR" : "172.27.7.0/24" },
	  "LLDUATEnv"			: { "CIDR" : "172.27.16.0/20" },
	  "LLDUATWLSubnetZA"	: { "CIDR" : "172.27.16.0/24" },
	  "LLDUATCoreSubnetZA"	: { "CIDR" : "172.27.17.0/24" },
	  "LLDUATDBSubnetZA"	: { "CIDR" : "172.27.18.0/24" },
	  "LLDUATDMZSubnetZA"	: { "CIDR" : "172.27.19.0/24" },
	  "LLDUATWLSubnetZB"	: { "CIDR" : "172.27.20.0/24" },
	  "LLDUATCoreSubnetZB"	: { "CIDR" : "172.27.21.0/24" },
	  "LLDUATDMZSubnetZB"	: { "CIDR" : "172.27.22.0/24" },
	  "LLDDevEnv"     		: { "CIDR" : "172.27.32.0/20" },
	  "LLDDevWLSubnet"		: { "CIDR" : "172.27.32.0/24" },
	  "LLDDevCoreSubnet"	: { "CIDR" : "172.27.33.0/24" },
	  "LLDDevDBSubnet"		: { "CIDR" : "172.27.34.0/24" },
	  "LLDDevDMZSubnet"     : { "CIDR" : "172.27.35.0/24" },
	  "LLDSTEnv"     		: { "CIDR" : "172.27.48.0/20" },
	  "LLDSTWLSubnet"		: { "CIDR" : "172.27.48.0/24" },
	  "LLDSTCoreSubnet"		: { "CIDR" : "172.27.49.0/24" },
	  "LLDSTDBSubnet"		: { "CIDR" : "172.27.50.0/24" },
	  "LLDSTDMZSubnet"	    : { "CIDR" : "172.27.51.0/24" },
	  "LLDA1MEnv"			: { "CIDR" : "172.27.64.0/24" },
	  "LLDA1MCoreSubnetZA"	: { "CIDR" : "172.27.64.0/26" },
	  "LLDA1MDMZSubnetZA"	: { "CIDR" : "172.27.64.64/26" },
	  "LLDA1MCoreSubnetZB"	: { "CIDR" : "172.27.64.128/26" },
	  "LLDA1MDMZSubnetZB"	: { "CIDR" : "172.27.64.192/26" },
	  "LLDserviceVPC"			: { "CIDR" : "172.27.65.0/24" },
	  "LLDA2MCoreSubnetZA"	: { "CIDR" : "172.27.65.0/26" },
	  "LLDA2MDMZSubnetZA"	: { "CIDR" : "172.27.65.64/26" },
	  "LLDA2MCoreSubnetZB"	: { "CIDR" : "172.27.65.128/26" },
	  "LLDA2MDMZSubnetZB"	: { "CIDR" : "172.27.65.192/26" }
	}

  },

  "Resources" : {

    "serviceVPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDserviceVPC", "CIDR" ]},
  		"EnableDnsSupport" : "true",
  		"EnableDnsHostnames" : "true",
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
                   {"Key" : "Stack", "Value" : { "Ref" : "AWS::StackName"} }, {"Key" : "Environment", "Value" : { "Ref" : "AWS::StackId"} },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_VPC"]]}}
         ]
      }
    },

    "VPCFlowLogRole" : {
      "Type"  : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
              "Statement" : [ {
                  "Effect" : "Allow",
                  "Principal" : {
                      "Service" : [ "vpc-flow-logs.amazonaws.com" ]
                  },
                  "Action" : [ "sts:AssumeRole" ]
              } ]
          },
          "Path" : "/service-role/"
      }
    },

    "VPCFlowLogRolePolicy" : {
        "Type" : "AWS::IAM::Policy",
        "Properties" : {
            "PolicyName" : "LLDManagement_FlowLogsPolicy",
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents","logs:DescribeLogGroups","logs:DescribeLogStreams"],
                  "Resource": ["*"]
                }
              ]
            },
            "Roles" : [ { "Ref" : "VPCFlowLogRole" } ]
        }
    },

    "serviceVPCFlowLog" : {
      "Type" : "AWS::EC2::FlowLog",
      "Properties" : {
        "DeliverLogsPermissionArn" : { "Fn::GetAtt" : ["VPCFlowLogRole", "Arn"] },
        "LogGroupName" : "LLDManagementVPCLogs",
        "ResourceId" : { "Ref" : "serviceVPC" },
        "ResourceType" : "VPC",
        "TrafficType" : "ALL"
      }
    },

    "A2MDMZSubnetZA" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "serviceVPC" },
        "AvailabilityZone" : {"Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ]},
        "CidrBlock" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDA2MDMZSubnetZA", "CIDR" ]},
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_A2MDMZSubnetZA"]]}}

        ]
      }
    },

    "A2MCoreSubnetZA" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "serviceVPC" },
        "AvailabilityZone" : {"Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ]},
        "CidrBlock" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDA2MCoreSubnetZA", "CIDR" ]},
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_A2MCoreSubnetZA"]]}}

        ]
      }
    },

	"A2MDMZSubnetZB" : {
	  "Type" : "AWS::EC2::Subnet",
	  "Properties" : {
	    "VpcId" : { "Ref" : "serviceVPC" },
        "AvailabilityZone" : {"Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ]},
        "CidrBlock" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDA2MDMZSubnetZB", "CIDR" ]},
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_A2MDMZSubnetZB"]]}}

        ]
      }
    },

    "A2MCoreSubnetZB" : {
	  "Type" : "AWS::EC2::Subnet",
	  "Properties" : {
	    "VpcId" : { "Ref" : "serviceVPC" },
        "AvailabilityZone" : {"Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ]},
        "CidrBlock" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDA2MCoreSubnetZB", "CIDR" ]},
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_A2MCoreSubnetZB"]]}}

        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_InternetGateway"]]}}
        ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "serviceVPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "PublicRouteTable" : {
      "Metadata" : {
        "Comment1" : "//-------------------------------------Route Tables----------------------------------------"
      },
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "serviceVPC"},
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_PublicRouteTable"]]}}

        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "DMZSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "A2MDMZSubnetZA" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "DMZSubnetRouteTableAssociationZB" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "A2MDMZSubnetZB" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "serviceVPC"},
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_PrivateRouteTable"]]}}
        ]
      }
    },

    "PrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NATDevice" }
      }
    },

    "A2MCoreSubnetZARouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "A2MCoreSubnetZA" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

	"A2MDMZSubnetZBRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "A2MCoreSubnetZA" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "A2MCoreSubnetZBSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "A2MCoreSubnetZA" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "PublicNetworkAcl" : {
      "Metadata" : {
        "Comment1" : "//-------------------------------------Network ACL Section----------------------------------------"
      },
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "serviceVPC"},
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_PublicNACL"]]}}

        ]
      }
    },

    "InboundLLDAWSPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDAWS", "CIDR" ]},
        "PortRange" : {"From" : "0", "To" : "65535"}
      }
    },

    "InboundSSHPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
        "RuleNumber" : "110",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },

    "InboundICMPPublicAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
        "RuleNumber" : "200",
        "Protocol" : "1",
        "Icmp" : {"Code" : -1,"Type" : -1},
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDAWS", "CIDR" ]}
      }
    },

    "InboundEphemeralPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
        "RuleNumber" : "300",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "32768", "To" : "61000"}
      }
    },

    "OutBoundPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
        "RuleNumber" : "90",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "0", "To" : "65535"}
      }
    },

    "OutBoundICMPPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
        "RuleNumber" : "200",
        "Protocol" : "1",
        "Icmp" : {"Code" : -1,"Type" : -1},
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0"
      }
    },

    "DMZSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "A2MDMZSubnetZA" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },

    "DMZSubnetNetworkAclAssociationZB" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "A2MDMZSubnetZB" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },

    "PrivateNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "serviceVPC"},
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_PrivateNACL"]]}}

        ]
      }
    },

    "InboundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PrivateNetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDAWS", "CIDR" ]},
        "PortRange" : {"From" : "0", "To" : "65535"}
      }
    },

    "InboundICMPPrivateAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PrivateNetworkAcl"},
        "RuleNumber" : "200",
        "Protocol" : "1",
        "Icmp" : {"Code" : -1,"Type" : -1},
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDAWS", "CIDR" ]}
      }
    },

    "InboundEphemeralPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PrivateNetworkAcl"},
        "RuleNumber" : "300",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "32768", "To" : "61000"}
      }
    },

    "OutBoundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PrivateNetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "0", "To" : "65535"}
      }
    },
    "OutBoundICMPPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PrivateNetworkAcl"},
        "RuleNumber" : "200",
        "Protocol" : "1",
        "Icmp" : {"Code" : -1,"Type" : -1},
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0"
      }
    },

    "A2MCoreSubnetZANetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "A2MCoreSubnetZA" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },

    "A2MCoreSubnetZBNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "A2MCoreSubnetZB" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },

    "NATDevice" : {
      "Metadata" : {
        "Comment1" : "//-------------------------------------NAT Device----------------------------------------"
      },
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "InstanceType" : { "Ref" : "NATInstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "SourceDestCheck" : "false",
        "ImageId" : { "Fn::FindInMap" : [ "AWSNATAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
		"NetworkInterfaces": [ {
		  "AssociatePublicIpAddress": "true",
		  "DeviceIndex": "0",
		  "GroupSet": [{ "Ref" : "NATSecurityGroup" }],
		  "SubnetId": { "Ref" : "A2MDMZSubnetZA" }
		} ],
		"BlockDeviceMappings" : [
		   {
              "DeviceName": "/dev/sda1",
			  "Ebs" : {
                  "VolumeSize" : "10",
                  "VolumeType" : "gp2",
                  "DeleteOnTermination" : true
              }
		   }
		],
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_NATDevice"]]}}

        ]
      }
    },

    "NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable internal access to the NAT device",
        "VpcId" : { "Ref" : "serviceVPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDAWS", "CIDR" ]}}
        ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : "0.0.0.0/0"} ],
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_NATSecurityGroup"]]}}

        ]
      }
    },

   "BastionSecurityGroup" : {
      "Metadata" : {
        "Comment1" : "//-------------------------------------Bastion Server----------------------------------------"
      },
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access to the bastion host",
        "VpcId" : { "Ref" : "serviceVPC" },
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : "0.0.0.0/0" }],
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_BastionSecurityGroup"]]}}

        ]
      }
    },

    "BastionIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "BastionHost" }
      }
    },

    "BastionHost" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                	{ "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "BastionInstanceType" }, "Arch" ] } ] },
        "InstanceType" : { "Ref" : "BastionInstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "Tags" : [ {"Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_Bastion"]]}}

        ],
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "BastionSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "A2MDMZSubnetZA" }
        }],
		"BlockDeviceMappings" : [
		   {
              "DeviceName": "/dev/sda1",
			  "Ebs" : {
                  "VolumeSize" : "10",
                  "VolumeType" : "gp2",
                  "DeleteOnTermination" : true
              }
		   }
		],
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_Bastion"]]}}

        ]
      }
    },

    "ChefAutomateServiceRole" : {
      "Metadata" : {
        "Comment1" : "//-------------------------------------Chef Automate Server Pre-requisites---------------------------------"
      },
      "Type"  : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
              "Statement" : [ {
                  "Effect" : "Allow",
                  "Principal" : {
                      "Service" : [ "opsworks-cm.amazonaws.com" ]
                  },
                  "Action" : [ "sts:AssumeRole" ]
              } ]
          },
          "Policies": [ {
               "PolicyName": "LLDEC2CloudWatch",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                     "Action": ["cloudwatch:PutMetricData","cloudwatch:GetMetricStatistics","cloudwatch:ListMetrics","ec2:DescribeTags"],
                     "Resource": "*"
                  } ]
               }
               }
          ],
          "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AWSOpsWorksCMServiceRole",
                                "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"],
          "Path" : "/service-role/"
      }
    },


    "ChefAutomateEC2Role" : {
      "Type"  : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
              "Statement" : [ {
                  "Effect" : "Allow",
                  "Principal" : {
                      "Service" : [ "ec2.amazonaws.com" ]
                  },
                  "Action" : [ "sts:AssumeRole" ]
              } ]
          },
          "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM", "arn:aws:iam::aws:policy/AWSOpsWorksCMInstanceProfileRole"],
          "Path" : "/service-role/",
          "RoleName": "aws-opsworks-cm-LLDMgmt-chef-ec2"
      }
    },

    "ChefEC2InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/service-role/",
        "Roles" : [ { "Ref" : "ChefAutomateEC2Role" } ],
        "InstanceProfileName": "aws-opsworks-cm-LLDMgmt-chef-ec2-profile"
      }
    },

    "ChefAutomateSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security group for chef automate",
        "VpcId" : { "Ref" : "serviceVPC" } ,
        "SecurityGroupIngress" : [
          						   { "IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : "0.0.0.0/0" } ,
          						   { "IpProtocol" : "tcp", "FromPort" : "8080",  "ToPort" : "8080",  "CidrIp" : "0.0.0.0/0" } ,
           						   { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
                                   { "IpProtocol" : "icmp", "FromPort" : "8",  "ToPort" : "-1",  "CidrIp" : "0.0.0.0/0" }

        ],
        "SecurityGroupEgress" : [
           						   { "IpProtocol" : "tcp", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : "0.0.0.0/0" },
                                   { "IpProtocol" : "icmp", "FromPort" : "8",  "ToPort" : "-1",  "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_ChefAutomateSecurityGroup"]]}}

        ]
      }
    },

    "SchedulerEC2Role" : {
      "Metadata" : {
        "Comment1" : "//-------------------------------------Scheduler Server----------------------------------------"
      },
      "Type"  : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
              "Statement" : [ {
                  "Effect" : "Allow",
                  "Principal" : {
                      "Service" : [ "ec2.amazonaws.com" ]
                  },
                  "Action" : [ "sts:AssumeRole" ]
              } ]
          },
          "Policies": [ {
               "PolicyName": "LLDEC2CloudWatch",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                     "Action": ["cloudwatch:PutMetricData","cloudwatch:GetMetricStatistics","cloudwatch:ListMetrics","ec2:DescribeTags"],
                     "Resource": "*"
                  } ]
               }
               }
          ],
          "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
                                "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"],
          "Path" : "/service-role/"
      }
    },

    "SchedulerInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/service-role/",
        "Roles" : [ { "Ref" : "SchedulerEC2Role" } ]
      }
    },

    "SchedulerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "CA Scheduler security group",
        "VpcId" : { "Ref" : "serviceVPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDAWS", "CIDR" ]}},
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDAWS", "CIDR" ]}},
           { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
           { "IpProtocol" : "icmp", "FromPort" : "8",  "ToPort" : "-1",  "CidrIp" : "0.0.0.0/0" }
        ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0"} ,
           { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"},
           { "IpProtocol" : "icmp", "FromPort" : "8",  "ToPort" : "-1",  "CidrIp" : "0.0.0.0/0" }],
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "ApplicationRole", "Value" : "SCHD" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_SchedulerSecurityGroup"]]}}

        ]
      }
    },

    "SchedulerServer" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Ref" : "BaseAMI" },
        "InstanceType" : { "Ref" : "SchedulerInstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "IamInstanceProfile" : { "Ref" : "SchedulerInstanceProfile" },
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "ApplicationRole", "Value" : "SCHD" },
                   {"Key" : "Environment", "Value" : "DMG" },
                   {"Key":"Name", "Value" : "AWS-LLAPP-LVDA-SCHD01"},
                   {"Key" : "scheduler:ebs-snapshot", "Value" : "none" }
        ],
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "SchedulerSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "A2MCoreSubnetZA" }
        }],
		"BlockDeviceMappings" : [
		   {
			  "DeviceName" : "/dev/sda1",
			  "Ebs" : {
                  "VolumeSize" : "10",
                  "VolumeType" : "gp2",
                  "DeleteOnTermination" : true
              }
		   },
           {
              "DeviceName" : "/dev/sdb",
              "Ebs" : {
                  "VolumeSize" : {"Fn::If" : ["FullSizeVolumes","490","10"]},
                  "VolumeType" : "gp2",
                  "Encrypted" : true,
                  "DeleteOnTermination" : true
              }
           }
		],
		"UserData" : {"Fn::Base64" : { "Fn::Join" : ["",[

				"#!/bin/bash","\n",
                "hostnamectl set-hostname AWS-LLAPP-LVDA-SCHD01 --static","\n",
                "systemctl start amazon-ssm-agent","\n",
                "systemctl enable amazon-ssm-agent.service"

			]]}
		}
      }
    },

    "BuildServerEC2Role" : {
      "Metadata" : {
        "Comment1" : "//-------------------------------------Build Server----------------------------------------"
      },
      "Type"  : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
              "Statement" : [ {
                  "Effect" : "Allow",
                  "Principal" : {
                      "Service" : [ "ec2.amazonaws.com" ]
                  },
                  "Action" : [ "sts:AssumeRole" ]
              } ]
          },
          "Policies": [ {
               "PolicyName": "LLDEC2CloudWatch",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                     "Action": ["cloudwatch:PutMetricData","cloudwatch:GetMetricStatistics","cloudwatch:ListMetrics","ec2:DescribeTags"],
                     "Resource": "*"
                  } ]
               }
               }
          ],
          "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
                                "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"],
          "Path" : "/service-role/"
      }
    },

    "BuildInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/service-role/",
        "Roles" : [ { "Ref" : "BuildServerEC2Role" } ]
      }
    },

    "BuildServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Build server security group",
        "VpcId" : { "Ref" : "serviceVPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDAWS", "CIDR" ]}},
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDAWS", "CIDR" ]}},
           { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
           { "IpProtocol" : "icmp", "FromPort" : "8",  "ToPort" : "-1",  "CidrIp" : "0.0.0.0/0" }
        ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0"} ,
           { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"},
           { "IpProtocol" : "icmp", "FromPort" : "8",  "ToPort" : "-1",  "CidrIp" : "0.0.0.0/0" }],
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "ApplicationRole", "Value" : "BULD" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_BuildServerecurityGroup"]]}}

        ]
      }
    },

    "BuildServer" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Ref" : "BaseAMI" },
        "InstanceType" : { "Ref" : "BuildInstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "IamInstanceProfile" : { "Ref" : "BuildInstanceProfile" },
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "ApplicationRole", "Value" : "SCHD" },
                   {"Key" : "Environment", "Value" : "DMG" },
                   {"Key":"Name", "Value" : "AWS-LLAPP-LVDA-BULD01"},
                   {"Key" : "scheduler:ebs-snapshot", "Value" : "none" }
        ],
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "BuildServerSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "A2MCoreSubnetZA" }
        }],
		"BlockDeviceMappings" : [
		   {
			  "DeviceName" : "/dev/sda1",
			  "Ebs" : {
                  "VolumeSize" : "10",
                  "VolumeType" : "gp2",
                  "DeleteOnTermination" : true
              }
		   },
           {
              "DeviceName" : "/dev/sdb",
              "Ebs" : {
                  "VolumeSize" : {"Fn::If" : ["FullSizeVolumes","490","10"]},
                  "VolumeType" : "gp2",
                  "Encrypted" : true,
                  "DeleteOnTermination" : true
              }
           }
		],
		"UserData" : {"Fn::Base64" : { "Fn::Join" : ["",[

				"#!/bin/bash","\n",
                "hostnamectl set-hostname AWS-LLAPP-LVDA-BULD01 --static","\n",
                "systemctl start amazon-ssm-agent","\n",
                "systemctl enable amazon-ssm-agent.service"
			]]}
		}
      }
    },

    "LDAPServerEC2Role" : {
      "Metadata" : {
        "Comment1" : "//-------------------------------------LDAP Servers----------------------------------------"
      },
      "Type"  : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
              "Statement" : [ {
                  "Effect" : "Allow",
                  "Principal" : {
                      "Service" : [ "ec2.amazonaws.com" ]
                  },
                  "Action" : [ "sts:AssumeRole" ]
              } ]
          },
          "Policies": [ {
               "PolicyName": "LLDEC2CloudWatch",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                     "Action": ["cloudwatch:PutMetricData","cloudwatch:GetMetricStatistics","cloudwatch:ListMetrics","ec2:DescribeTags"],
                     "Resource": "*"
                  } ]
               }
               }
          ],
          "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
                                "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"],
          "Path" : "/service-role/"
      }
    },

    "LDAPInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/service-role/",
        "Roles" : [ { "Ref" : "LDAPServerEC2Role" } ]
      }
    },

    "LDAPServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "LDAP server security group",
        "VpcId" : { "Ref" : "serviceVPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDAWS", "CIDR" ]}},
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Fn::FindInMap" : [ "CIDRBlocks", "LLDAWS", "CIDR" ]}},
           { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
           { "IpProtocol" : "icmp", "FromPort" : "8",  "ToPort" : "-1",  "CidrIp" : "0.0.0.0/0" }
        ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0"} ,
           { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"},
           { "IpProtocol" : "icmp", "FromPort" : "8",  "ToPort" : "-1",  "CidrIp" : "0.0.0.0/0" }],
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "ApplicationRole", "Value" : "LDAP" },
                   {"Key" : "Environment", "Value" : "DMG" },
        		   {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_LDAPServerecurityGroup"]]}}

        ]
      }
    },

    "LDAPServerZA" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Ref" : "BaseAMI" },
        "InstanceType" : { "Ref" : "LDAPInstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "IamInstanceProfile" : { "Ref" : "LDAPInstanceProfile" },
        "Tags" : [
                   {"Key" : "ApplicationID", "Value" : "LLAPP" },
                   {"Key" : "ApplicationRole", "Value" : "LDAP" },
                   {"Key" : "Environment", "Value" : "DMG" },
                   {"Key":"Name", "Value" : "AWS-LLAPP-LVDA-LDAP01"},
                   {"Key" : "scheduler:ebs-snapshot", "Value" : "none" }
        ],
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "LDAPServerSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "A2MCoreSubnetZA" }
        }],
		"BlockDeviceMappings" : [
		   {
			  "DeviceName" : "/dev/sda1",
			  "Ebs" : {
                  "VolumeSize" : "10",
                  "VolumeType" : "gp2",
                  "DeleteOnTermination" : true
              }
		   },
           {
              "DeviceName" : "/dev/sdb",
              "Ebs" : {
                  "VolumeSize" : {"Fn::If" : ["FullSizeVolumes","490","10"]},
                  "VolumeType" : "gp2",
                  "Encrypted" : true,
                  "DeleteOnTermination" : true
              }
           }
		],
		"UserData" : {"Fn::Base64" : { "Fn::Join" : ["",[

				"#!/bin/bash","\n",
                "hostnamectl set-hostname AWS-LLAPP-LVDA-LDAP01 --static","\n",
                "systemctl start amazon-ssm-agent","\n",
                "systemctl enable amazon-ssm-agent.service"

			]]}
		}
      }
    },

	"PrivateDNS": {
      "Metadata" : {
        "Comment1" : "//-------------------------------------DNS Private Hosted Zones-----------------------------------"
      },
	  "Type": "AWS::Route53::HostedZone",
	  "Properties": {
		"HostedZoneConfig": {
		  "Comment": "Hosted zone for local domain"
		},
		"Name": { "Ref" : "LocalDomain" },
		"VPCs": [ { "VPCId": {"Ref" : "serviceVPC"},"VPCRegion": { "Ref" : "AWS::Region" }}
		 ],
		"HostedZoneTags" : [ {"Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
							 {"Key":"Name", "Value" : { "Fn::Join" : ["", [{ "Ref" : "AWS::StackName" }, "_PrivateHostedZone"]]}}
		]
	  }
	},

	"PrivateDNSRecords" : {
		"Type" : "AWS::Route53::RecordSetGroup",
		"Properties" : {
			"HostedZoneId" : { "Ref" : "PrivateDNS" },
			"Comment" : "DNS records for Dev, System Test",
			"RecordSets" : [
				{
					"Name" : {"Fn::Join" : [ "", ["scheduler.",{"Ref" : "LocalDomain"}] ]},
					"Type" : "A",
					"TTL" : "900",
					"ResourceRecords" : [{ "Fn::GetAtt" : ["SchedulerServer", "PrivateIp"] }]
                },
                {
					"Name" : {"Fn::Join" : [ "", ["build.",{"Ref" : "LocalDomain"}] ]},
					"Type" : "A",
					"TTL" : "900",
					"ResourceRecords" : [{ "Fn::GetAtt" : ["BuildServer", "PrivateIp"] }]
                },
                {
					"Name" : {"Fn::Join" : [ "", ["ldap.",{"Ref" : "LocalDomain"}] ]},
					"Type" : "A",
					"TTL" : "900",
					"ResourceRecords" : [{ "Fn::GetAtt" : ["LDAPServerZA", "PrivateIp"] }]
                }
			]
		}
	}

  },

  "Outputs" : {
   "VpcId" : {
      "Description": "VPC",
      "Value": { "Ref" : "serviceVPC" },
      "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-VPCID" }}
    },
    "A2MDMZSubnetZA" : {
      "Description" : "EnvSubnet ID",
      "Value" :  { "Ref" : "A2MDMZSubnetZA" },
      "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-A2MDMZSubnetZAID" }}
    },
    "A2MCoreSubnetZA" : {
      "Description" : "A2MCoreSubnetZA ID",
      "Value" :  { "Ref" : "A2MCoreSubnetZA" },
      "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-A2MCoreSubnetZAID" }}
    },
	"A2MDMZSubnetZB" : {
      "Description" : "A2MDMZSubnetZB ID",
      "Value" :  { "Ref" : "A2MDMZSubnetZB" },
      "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-A2MDMZSubnetZBID" }}
    },
	"A2MCoreSubnetZB" : {
      "Description" : "A2MCoreSubnetZB ID",
      "Value" :  { "Ref" : "A2MCoreSubnetZB" },
      "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-A2MCoreSubnetZBID" }}
    },
    "BastionSecurityGroup":{
    	"Description" : "Bastion security group",
    	"Value" : { "Ref" : "BastionSecurityGroup" },
    	"Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-BastionSecurityGroup" }}
    },
    "PublicRouteTable":{
    	"Description" : "Route Table, exported to allow other peered VPCs to insert routes",
    	"Value" : { "Ref" : "PublicRouteTable" },
    	"Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-PublicRouteTable" }}
    },
    "PrivateRouteTable":{
    	"Description" : "Route Table, exported to allow other peered VPCs to insert routes",
    	"Value" : { "Ref" : "PrivateRouteTable" },
    	"Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-PrivateRouteTable" }}
    },
    "BastionHost":{
    	"Description" : "Bastion host IP",
    	"Value" : { "Fn::GetAtt" : ["BastionHost", "PublicIp"] }
    },
    "Scheduler":{
    	"Description" : "Scheduler host",
    	"Value" : {  "Fn::GetAtt" : ["SchedulerServer", "PrivateIp"]  },
        "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-Scheduler" }}
    },
    "BuildServer":{
    	"Description" : "Build host",
    	"Value" : {  "Fn::GetAtt" : ["BuildServer", "PrivateIp"]  },
        "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-Build" }}
    },
    "LDAPServer":{
    	"Description" : "LDAP host",
    	"Value" : {  "Fn::GetAtt" : ["LDAPServerZA", "PrivateIp"]  },
        "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-LDAPZA" }}
    },
    "HostedZone":{
    	"Description" : "Private DNS Hosted Zone",
    	"Value" :  { "Ref" : "PrivateDNS" },
    	"Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-HostedZone" }}
    }
  }
}
